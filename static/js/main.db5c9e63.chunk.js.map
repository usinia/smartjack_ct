{"version":3,"sources":["components/ImageContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["ImageContainer","photos","imgStyle","display","position","top","left","transform","Container","map","photo","index","Image","key","src","makerLogoUrl","alt","makerName","style","styled","div","API_URL","App","state","current","loadImage","page","fetch","then","res","json","setState","catch","error","console","log","onChange","this","length","defaultPageSize","total","justifyContent","marginTop","marginBottom","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4/BAGe,SAASA,EAAT,GAAqC,IAAXC,EAAU,EAAVA,OACjCC,EAAW,CACfC,QAAS,QACTC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEb,OACE,kBAACC,EAAD,KACGP,GACCA,EAAOQ,KAAI,SAACC,EAAOC,GACjB,OAAIA,GAAS,EAAU,KAErB,kBAACC,EAAD,CAAOC,IAAKF,EAAOA,MAAOA,EAAQ,GAChC,yBACEG,IAAKJ,EAAMK,aACXC,IAAKN,EAAMO,UACXC,MAAOhB,SAQvB,IAAMM,EAAYW,IAAOC,IAAV,KAaTR,EAAQO,IAAOC,IAAV,KCrCLC,G,OAAO,iFAuDEC,E,2MApDbC,MAAQ,CACNtB,OAAQ,GACRuB,QAAS,G,EAGXC,UAAY,WAAe,IAAdC,EAAa,uDAAN,EAClBC,MAAM,GAAD,OAAIN,EAAJ,iBAAoBK,IACtBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZ9B,OAAQ6B,OAGXE,OAAM,SAAAC,GAAK,OACVC,QAAQC,IAAI,0CAA2CF,O,EAI7DG,SAAW,WAAe,IAAdV,EAAa,uDAAN,EACjB,EAAKK,SAAS,CACZP,QAASE,IAEX,EAAKD,UAAUC,I,wEAGP,IAAD,EACqBW,KAAKd,MAAzBtB,EADD,EACCA,OAAQuB,EADT,EACSA,QACRC,EAAcY,KAAdZ,UAKR,OAJsB,IAAlBxB,EAAOqC,QACTb,EAAUD,GAIV,6BACE,kBAACxB,EAAD,CAAgBC,OAAQA,IACxB,kBAAC,IAAD,CACEmC,SAAUC,KAAKD,SACfZ,QAASa,KAAKd,MAAMC,QACpBe,gBAAiB,EACjBC,MAAO,IACPtB,MAAO,CACLf,QAAS,OACTsC,eAAgB,SAChBC,UAAW,OACXC,aAAc,e,GA7CRC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.db5c9e63.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function ImageContainer({ photos }) {\n  const imgStyle = {\n    display: \"block\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\"\n  };\n  return (\n    <Container>\n      {photos &&\n        photos.map((photo, index) => {\n          if (index >= 9) return null;\n          return (\n            <Image key={index} index={index + 1}>\n              <img\n                src={photo.makerLogoUrl}\n                alt={photo.makerName}\n                style={imgStyle}></img>\n            </Image>\n          );\n        })}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 200px;\n  grid-auto-rows: 200px;\n  grid-gap: 10px;\n  /* background-color: black; */\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n    Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin: 10px;\n  padding: 10px;\n`;\n\nconst Image = styled.div`\n  /* display: flex; */\n  display: inline-block;\n  justify-content: center;\n  align-items: center;\n  /* background-color: #3d3b41; */\n  border-radius: 20px;\n  font-size: 28px;\n  color: white;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n`;\n","import React, { Component } from \"react\";\nimport Pagination from \"rc-pagination\";\nimport ImageContainer from \"./ImageContainer\";\nimport \"rc-pagination/assets/index.css\";\n\nconst API_URL = `https://kpmdj7u7dd.execute-api.ap-northeast-2.amazonaws.com/recurit/makerList`;\n\nclass App extends Component {\n  state = {\n    photos: [],\n    current: 1\n  };\n\n  loadImage = (page = 1) => {\n    fetch(`${API_URL}?page=${page}`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          photos: json\n        });\n      })\n      .catch(error =>\n        console.log(\"a error occurred while loading image...\", error)\n      );\n  };\n\n  onChange = (page = 1) => {\n    this.setState({\n      current: page\n    });\n    this.loadImage(page);\n  };\n\n  render() {\n    const { photos, current } = this.state;\n    const { loadImage } = this;\n    if (photos.length === 0) {\n      loadImage(current);\n    }\n\n    return (\n      <div>\n        <ImageContainer photos={photos} />\n        <Pagination\n          onChange={this.onChange}\n          current={this.state.current}\n          defaultPageSize={9}\n          total={12 * 9}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginTop: \"20px\",\n            marginBottom: \"50px\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}